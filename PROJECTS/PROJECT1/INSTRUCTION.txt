
Project for OOps basic modul 1,2,3 BANK ACCOUNT MANAGEMENT SYSTEM


Choose an options:

1> create a new account
	Enter the required details: user name, email(validate the email that email should be not taken before), 
    phone(valiate the phone that phone should be not taken before), 
    account_type(account type should be saving and current only dont accept any another input), 
    initial balance
	display Acount has been created account number: 1232131

	Display format should be clear 
	

	GEnerate :
	account number
	ifsc code
	branch name:

2> update an account
	enter  the account number: 
		312312
`		validate the entred account number:
		if vlidated
			enter the updated details, name, email, phone
			update the details:
        
3> delete an account
	enter  the account number: 
		312312
`		validate the entred account number:
		if vlidated
		DELETE THE ACCOUNT AND DISPLAY THE MESSAGE
	
4> View account by number:
	enter  the account number: 
		312312
`		validate the entred account number:
		if vlidated
		DISPLAY ACCOUNT DETAILS  IN PRPER FORMAT

5> view all account:
	DISPLAY ALL ACCOUNT IN FORMAT

6> Choose Transaction:
	1> Credit amount:  account number:21313 validte >> operations
	2> debit amount:  account number:21313 validte >> operations
	3> view account balance: account number:21313 validte >> operations

7> Exit



use class and Encapsulations :
	create an array for storing the accounts details: 
	Generate A random Account number of 12 desigt there format shoud be bankname+ifsccode last 2 						
    digit+ some random number but make sure that d should 						
    not taken before number should be unique

	ifsc code and the branch name should be constant
	
	validate the account number for all operations perform all the operations on the basis of 
	account number only

	make all the variable or the properties as private in the acount class
	create the id of the account also
	use some random id or uuid



	
template:

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

class BankAccount {
    private String id;
    private String accountNumber;
    private String ifscCode;
    private String branchName;
    private String userName;
    private String email;
    private String phone;
    private String accountType;
    private double balance;

    public BankAccount(String userName, String email, String phone, String accountType, double initialBalance) {
        this.id = UUID.randomUUID().toString();
        this.accountNumber = generateAccountNumber();
        this.ifscCode = "SBIN012345";
        this.branchName = "Main Branch";
        this.userName = userName;
        this.email = email;
        this.phone = phone;
        this.accountType = accountType;
        this.balance = initialBalance;
    }

    private String generateAccountNumber() {
        return "SBIN" + ifscCode.substring(ifscCode.length() - 2) + UUID.randomUUID().toString().substring(0, 6);
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public String getId() {
        return id;
    }

    public String getUserName() {
        return userName;
    }

    public String getEmail() {
        return email;
    }

    public String getPhone() {
        return phone;
    }

    public String getAccountType() {
        return accountType;
    }

    public double getBalance() {
        return balance;
    }

    public void updateDetails(String userName, String email, String phone) {
        this.userName = userName;
        this.email = email;
        this.phone = phone;
    }

    public void creditAmount(double amount) {
        balance += amount;
    }

    public void debitAmount(double amount) {
        if (amount > balance) {
            System.out.println("Insufficient balance");
        } else {
            balance -= amount;
        }
    }

    @Override
    public String toString() {
        return "Account Number: " + accountNumber + "\n" +
               "IFSC Code: " + ifscCode + "\n" +
               "Branch Name: " + branchName + "\n" +
               "User Name: " + userName + "\n" +
               "Email: " + email + "\n" +
               "Phone: " + phone + "\n" +
               "Account Type: " + accountType + "\n" +
               "Balance: " + balance;
    }
}

public class Bank {
    private List<BankAccount> accounts;

    public Bank() {
        accounts = new ArrayList<>();
    }

    public void createAccount(String userName, String email, String phone, String accountType, double initialBalance) {
        if (validateEmail(email) && validatePhone(phone)) {
            BankAccount account = new BankAccount(userName, email, phone, accountType, initialBalance);
            accounts.add(account);
            System.out.println("Account created successfully. Account Number: " + account.getAccountNumber());
        } else {
            System.out.println("Email or phone number already exists");
        }
    }

    public void updateAccount(String accountNumber, String userName, String email, String phone) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber().equals(accountNumber)) {
                account.updateDetails(userName, email, phone);
                System.out.println("Account updated successfully");
                return;
            }
        }
        System.out.println("Account not found");
    }

    public void deleteAccount(String accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber().equals(accountNumber)) {
                accounts.remove(account);
                System.out.println("Account deleted successfully");
                return;
            }
        }
        System.out.println("Account not found");
    }

    public void viewAccount(String accountNumber) {
        for (BankAccount account : accounts) {
            if (account.getAccountNumber().equals(accountNumber)) {
                System.out.println(account);
                return;
            }
        }
        System.out.println("Account not found");
    }

    public void viewAllAccounts() {
        for (BankAccount account : accounts) {
            System.out.println(account);
            System.out.println("-------------------------------");
        }
    }

    private boolean validateEmail(String email) {
        for (BankAccount account : accounts) {
            if (account.getEmail().equals(email)) {
                return false;
            }
        }
        return true;
    }

    private boolean validatePhone(String phone) {
        for (BankAccount account : accounts) {
            if (account.getPhone().equals(phone)) {
                return false;
            }
        }
        return true;
    }
	}
