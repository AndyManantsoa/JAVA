OBJECT ORIENTED PROGRAMING:

    step by step : procedural oriented approach.(in case of C)
    -> There was lagging: not flexible
                          no proper arrangement
                          time consuming

-> So, Object Oriented Programming was introduced:
    it is a rule to follow when we build scalable and flexible application.


OOP: is an approach by which we can design a program or application trully based on object and class

OPPS: (appoach) deals with real world entity

Advantages of OOP:
_________________

- flexibility: it is more flexible more than the procedural approach.
- high security: it is highly secured.
- reusability: it follows the dry principal (ie do not repeat)
- scalability: we can do versioning of the programs with the help of modules and structure given by the oops


CONCEPTS OF OOPs:
___________________

1. CLASSES:
    -> class is a blueprint or template or conctainer or a design pattern which is used to store the properties(instance variable) 
    and behaviors (function) of the resective object
    -> Class does not consum any space in the memory.
    * keyword: class ClassName(){
    }

2. OBJECT:
 Real world :
    -> Entity existing in the real world which has a physical existance and is surrounding us.
    -> Every objects will have properties and behaviors.

 In OOPS :
    -> object is an instance of a class
    * keyword: ClassName objectName = new ClassName();

3. INHERITANCE:
    -> inheritance is a mechanism by which one class can inherit the properties of another class.
    -> it is a process of creating a new class from an existing class.
    -> it is a way of creating a new class from an existing class.

    ->Key Concepts:
        - Superclass: The existing class from which the new class is derived.
        - Subclass: The new class that is derived from the superclass.
        - Inheritance: The process of creating a new class based on an existing class.
        - Extends: The keyword used to indicate that a subclass is inheriting from a superclass.

    ->Types of Inheritance:
        - Single Inheritance: A subclass inherits from a single superclass.
        ex: class A {}
            class B extends A {}

        - Multilevel Inheritance: A subclass inherits from a superclass that itself inherits from another superclass.
        ex: class A {}
            class B extends A {}
            class C extends B {}

        - Hierarchical Inheritance: A superclass has multiple subclasses.
        ex: class A {}
            class B extends A {}
            class C extends A {}



4. ENCAPSULATION:
    -> Encapsulation is the concept of bundling data and its associated methods that operate on that data within a single unit,
     called a class or object.
    
    -> Key Concepts:
        - Data Hiding: The idea of hiding the internal implementation details of an object from the outside world.
        - Abstraction: The concept of showing only the necessary information to the outside world while hiding the internal details.
        - Access Modifiers: The keywords used to control access to the attributes and methods of a class.
    
    -> Types of Access Modifiers:
        - Public: Accessible from anywhere.
        - Private: Accessible only within the same class.
        - Protected: Accessible within the same class and its subclasses.
        - Default (no modifier): Accessible within the same package.

5. POLYMORPHISM:
    ->Polymorphism is the ability of an object to take on multiple forms, depending on the context in which it is used.

    ->Types of Polymorphism:
        - Method Overloading: Multiple methods with the same name but different parameters.
                            ex: void example(int a);
                                void example(int a, int b);
                                
        - Method Overriding: it occurs when a subclass provides a specific implementation of a method that is already 
                            defined in its superclass.
                            The method in the subclass must have the same name, return type, and parameters.
                            ex: class Animal {
                                    void sound() {
                                        System.out.println("Animal makes a sound.");
                                    }
                                }
                                class Dog extends Animal {
                                    @Override
                                    void sound() {
                                        System.out.println("Dog barks.");
                                    }
                                }
            
    -> Key Concepts:
        - Method Signature: The name, return type, and parameter list of a method.
        - Method Resolution: The process of determining which method to call at runtime.
        - Dynamic Method Dispatch: The JVM determines which method to call at runtime based on the object's class and its superclass(es).

6. ABSTRACTION1:
    -> Abstraction is the concept of showing only the necessary information to the outside world while hiding the internal details.

    -> Types of Abstraction:
        Abstract Classes: A class that cannot be instantiated on its own and is intended to be inherited by other classes.
        Interfaces: A abstract class that contains only abstract methods and constants.
    
    -> Key Concepts:
        - Abstract Methods: Methods that are declared without an implementation.
        - Abstract Classes: Classes that contain abstract methods and cannot be instantiated on their own.
        - Interfaces: Abstract classes that contain only abstract methods and constants.
    